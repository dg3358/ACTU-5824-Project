library(readxl)
suppressWarnings(library(quantmod))
suppressWarnings(library(ggplot2))
library(stats)
library(rethinking)
#Response variable
yield_w_EL <- read_xlsx(path = "data/yield_with_EL.xlsx",
skip = 2)
yield_w_EL$Date <- as.Date(yield_w_EL$Date)
#Credit Spread (for potential modeling of Reinsurance premium)
credit_spread <- read_xls(path = "data/Credit_Spread_BofA_weekly.xls",
skip = 10)
credit_spread$observation_date <- as.Date(credit_spread$observation_date)
colnames(credit_spread) <- c("Date", "Spread")
#Break-Even Interest Rate (expected measure of inflation)
BEIR <- read_xls(path = "data/BEIR.xls",
skip = 10)
BEIR$observation_date <- as.Date(BEIR$observation_date)
colnames(BEIR) <- c("Date", "BEIR")
#S & P Information
S_and_P <- read_xls(path = "data/SP500.xls",
skip = 10)
S_and_P$observation_date <- as.Date(S_and_P$observation_date)
colnames(S_and_P) <- c("Date", "SP500")
#EAFE Index
EAFE <- read.csv("data/EAFE International Index value.csv")
ggplot(data = yield_w_EL) + geom_line(aes(x = Date,
y = `Money Market rate (USD)`))
ggplot(data = yield_w_EL) + geom_line(aes(x = Date,
y = `weekly average reinsurance market yield (USD)`))
ggplot(data = credit_spread) + geom_line(aes(x = Date,
y = Spread/100))
ggplot() + geom_line(data = yield_w_EL,
mapping = aes(x = Date,
y = `weekly average reinsurance market yield (USD)`,
color = 'Reinsurance Market Yield')) +
geom_line(data = credit_spread, aes(x = Date, y = Spread/100,
color = 'Credit Spread')) +
labs(colour = 'Quantity') + ylab('Value') +
scale_x_continuous("Date", breaks = c(14975, 15340, 15705,
16070,16435, 16800,
17165, 17530, 17895,
18260, 18625, 18990,
19355, 19720),
labels = c(2011, 2012, 2013, 2014, 2015, 2016,
2017, 2018, 2019, 2020, 2021, 2022,
2023, 2024)) +
ggtitle("Credit spread & Expected Reinsurance Market Yield over time") +
theme(legend.position = "inside", legend.position.inside =  c(0.15, .85),
plot.title = element_text(hjust = .5))
ggplot() + geom_line(data = yield_w_EL,
mapping = aes(x = Date,
y = `weekly average reinsurance market yield (USD)`,
color = 'Reinsurance Market Yield')) +
geom_line(data = BEIR, aes(x = Date, y = BEIR/100,
color = 'BEIR')) +
labs(colour = 'Quantity') + ylab('Value') +
scale_x_continuous("Date", breaks = c(14975, 15340, 15705,
16070,16435, 16800,
17165, 17530, 17895,
18260, 18625, 18990,
19355, 19720),
labels = c(2011, 2012, 2013, 2014, 2015, 2016,
2017, 2018, 2019, 2020, 2021, 2022,
2023, 2024)) +
ggtitle("Credit spread & Expected Reinsurance Market Yield over time") +
theme(legend.position = "inside", legend.position.inside =  c(0.15, .85),
plot.title = element_text(hjust = .5))
ggplot() + geom_line(data = yield_w_EL,
mapping = aes(x = Date,
y = `weekly average reinsurance market yield (USD)`,
color = 'Reinsurance Market Yield')) +
geom_line(data = yield_w_EL, aes(x = Date, y = `Expected Loss (EL)`,
color = 'Expected Loss')) +
labs(colour = 'Quantity') + ylab('Value') +
scale_x_continuous("Date", breaks = c(14975, 15340, 15705,
16070,16435, 16800,
17165, 17530, 17895,
18260, 18625, 18990,
19355, 19720),
labels = c(2011, 2012, 2013, 2014, 2015, 2016,
2017, 2018, 2019, 2020, 2021, 2022,
2023, 2024)) +
ggtitle("Credit spread & Expected Reinsurance Market Yield over time") +
theme(legend.position = "inside", legend.position.inside =  c(0.15, .85),
plot.title = element_text(hjust = .5))
credit_spread_daily <- read_xls(path = "data/Credit_Spread_BofA_daily.xls",
skip = 10)
credit_spread_daily$observation_date <- as.Date(credit_spread_daily$observation_date)
colnames(credit_spread_daily) <- c("Date", "Spread")
full_data <- merge(yield_w_EL, credit_spread_daily, by = 'Date')
full_data['Spread'] <- round(full_data['Spread']/100,6)
train_data <- full_data[c(which(full_data$Date <= as.Date("2020-10-08"))),]
test_data <- full_data[c(which(full_data$Date > as.Date("2020-10-08"))),]
good_col_names <- c("Date", "Yield", "MMR", "EL", "Total_Yield","Spread")
colnames(train_data) <- good_col_names
colnames(test_data) <- good_col_names
full_data
acf(train_data$Yield,
lag.max = 100)
acf(diff(train_data$Yield))
pacf(diff(train_data$Yield))
lag_1 <- pacf(diff(train_data$Yield),
plot = F)[1]
lag_1
ggplot() + geom_line(aes(x = train_data$Date[2:length(train_data$Date)],
y = diff(train_data$Yield)))
acf(train_data$Spread, lag.max = 50)
acf(diff(train_data$Spread))
pacf(diff(train_data$Spread/100))
spread_ar <- ar(diff(train_data$Spread), aic = TRUE, order.max = 5,
demean = TRUE)
spread_ar
polyroot(c(1,spread_ar$ar * -1))
ggplot() + geom_line(aes(x = train_data$Date[2:length(train_data$Date)],
y = diff(train_data$Spread)))
acf(train_data$EL, lag.max = 100)
acf(diff(train_data$EL))
pacf(diff(train_data$EL))
EL_ar <- ar(diff(train_data$EL), aic = TRUE, order.max = 10,
demean = TRUE)
EL_ar
polyroot(c(1, EL_ar$ar * -1))
ccf(diff(train_data$Spread),
diff(train_data$Yield),
lag.max = 100)
ccf(diff(train_data$Spread),
diff(train_data$Yield),
lag.max = 200, plot = FALSE)[seq(-40, -30, 1)]
ccf(diff(train_data$EL),
diff(train_data$Yield),
lag.max = 100)
cor(train_data[,c("Yield",
"Spread", "EL")])
ggplot(data = train_data) + geom_point(aes(x = EL, y = Yield))
m1 <- arima(train_data$Yield, order = c(1,1,0), include.mean = TRUE)
pred_m1 <- predict(m1, n.ahead = length(test_data$Yield))
ggplot() + geom_line(aes(x = test_data$Date, y = test_data$Yield,
color = 'Actual')) +
labs(colour = 'Quantity') + xlab('Date') + ylab('Yield') +
geom_line(aes(x = test_data$Date, y = pred_m1$pred,
color = 'predicted'))
m1
m2 <- arima(train_data$Yield, order = c(1,1,0),
xreg = train_data$EL,
include.mean = TRUE)
m2
pred_m2 <- predict(m2, n.ahead = length(test_data$Yield),
newxreg = test_data$EL)
ggplot() + geom_line(aes(x = test_data$Date, y = test_data$Yield,
color = 'Actual')) +
labs(colour = 'Quantity') + xlab('Date') + ylab('Yield') +
geom_line(aes(x = test_data$Date, y = pred_m2$pred,
color = 'predicted'))
spread_lag_36 <- full_data$Spread[seq(1, length(train_data$Spread) - 36)]
spread_lag_36_test <- full_data$Spread[seq(length(train_data$Spread) - 36,
length(diff(full_data$Spread)) - 36)]
yield_for_m3 <- train_data$Yield[seq(37,
length(train_data$Yield))]
EL_for_m3 <-  train_data$EL[seq(37, length(train_data$EL))]
train_data_m3 <- as.data.frame(alist(
Yield = yield_for_m3, EL = EL_for_m3, Spread = spread_lag_36))
m3 <- arima(train_data_m3$Yield, order = c(1,1,0),
xreg = as.matrix.data.frame(train_data_m3[,c("EL","Spread")]))
m3
test_data_m3 <- as.data.frame(alist(
Yield = test_data$Yield,
EL = test_data$EL,
Spread_lag_36 = spread_lag_36_test
))
pred_m3 <- predict(m3, n.ahead = length(test_data$Yield),
newxreg = as.matrix.data.frame(test_data_m3[,c("EL","Spread_lag_36")]))
ggplot() + geom_line(aes(x = test_data$Date, y = test_data$Yield,
color = 'Actual')) +
geom_line(aes(x = test_data$Date, y = pred_m3$pred,
color = 'predicted')) +
labs(colour = 'Quantity') + xlab('Date') + ylab('Yield')
BIC_1 <- -2 * m1$loglik + 1 * log(length(train_data$Yield))
BIC_2 <- -2 * m2$loglik + 2 * log(length(train_data$Yield))
BIC_3 <- -2 * m3$loglik + 3 * log(length(train_data_m3$Yield))
BIC_frame <- as.data.frame(alist(model = c("m1", "m2", "m3"),
BIC = c(BIC_1, BIC_2, BIC_3)))
BIC_frame
ggplot() + geom_line(aes(x = test_data$Date, y = test_data$Yield,
color = 'Actual')) +
geom_line(aes(x = test_data$Date, y = pred_m1$pred,
color = 'm1')) +
geom_line(aes(x = test_data$Date, y = pred_m2$pred,
color = 'm2')) +
geom_line(aes(x = test_data$Date, y = pred_m3$pred,
color = 'm3')) +
labs(colour = 'Predictions') + xlab('Date') + ylab('Yield') +
ggtitle("Model Predictions of Reinsurance Market Yield") +
theme(plot.title = element_text(hjust = .5))
percent_changes_sp <- numeric(length(S_and_P$SP500) - 12)
percent_changes_cat <- percent_changes_sp
for (i in 1:(length(S_and_P$SP500) - 12)) {
percent_changes_sp[i] <- ((S_and_P$SP500[i + 12] - S_and_P$SP500[i]) / S_and_P$SP500[i]) * 100
percent_changes_cat[i] <- ((yield_w_EL$`Total Coupon CAT Bond Market (USD)`[i + 222 + 12] - yield_w_EL$`Total Coupon CAT Bond Market (USD)`[i + 222]) / yield_w_EL$`Total Coupon CAT Bond Market (USD)`[i + 222]) * 100
}
change_in_yield <- data.frame(
Date_sp = S_and_P$Date[1:(length(S_and_P$Date) - 12)],
Date_cat = yield_w_EL$Date[223:(length(S_and_P$Date) - 12 + 223 - 1)],
Percent_Change_sp = percent_changes_sp,
Percent_Change_cat = percent_changes_cat
)
